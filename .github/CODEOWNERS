# prompt: class ReflexSignatureMap:
#     def __init__(self, event_bus):
#         ...
#         event_bus.subscribe("reflex_degraded", self.handle_degradation)
#     def handle_degradation(self, data):
#         reflex_id = data["reflex_id"]
#         reason = data["reason"]
#         self.signature_map.pop(reflex_id, None)
#         self.evolution_log.append(f"Degraded reflex {reflex_id}: {reason}")
#         logger.info(f"Removed signature for {reflex_id} due to: {reason}")

import logging

logger = logging.getLogger(__name__)

class ReflexSignatureMap:
    def __init__(self, event_bus):
        self.signature_map = {}  # Initialize signature_map
        self.evolution_log = []  # Initialize evolution_log
        event_bus.subscribe("reflex_degraded", self.handle_degradation)

    def handle_degradation(self, data):
        reflex_id = data["reflex_id"]
        reason = data["reason"]
        self.signature_map.pop(reflex_id, None)
        self.evolution_log.append(f"Degraded reflex {reflex_id}: {reason}")
        logger.info(f"Removed signature for {reflex_id} due to: {reason}")
